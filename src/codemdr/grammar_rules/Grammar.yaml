Variables: { }

Add:
  IMPRIMER: '(\bi|^I)mprimer\b'
  VAUT: '\bvaut\b'
  DECLARER: '(\bp|^P)osons\ que\ '
  MAINTENANT: '(\bm|^M)aintenant,\ (\b|$)'
  DEMANDER: '(\bd|^D)emander\ puis\ enregistrer\ dans\ '
  L_APPEL_A: "le\\ résultat\\ de\\ l'appel\\ à"

  EXECUTER: '(\be|^E)xécuter\ '
  ENONCES: 'énoncé(s?)'
  PUIS: 'puis'
  ALLER_A: 'aller\ à'
  SAUTER: 'sauter'

  TANT_QUE: '\btant\ que\b'
  SINON: 'sinon,'
  SI: 'si'

  FONCTION_DEF: "(\bd|^D)ébut\ de\ la\ définition\ d'une\ fonction\ nommée"
  FONCTION_END: "(\bf|^F)in\ de\ la\ définition\ de\ la\ fonction"

  APPELER: '(\ba|^A)ppeler'

  AVEC: '\bavec\b'
  ARG: "l'argument"
  ARGS: 'les\ arguments'

  TABLEAU_CREATION_SINGLETON: '\bun\ tableau\ contenant\ seulement'
  TABLEAU_CREATION: '\bun\ tableau\ contenant'

  ELEMENT_DE: 'élément\ de'
  A_LA_POS: 'à\ la\ position'

  EMPHASE: '"'

  datatypes:
    DECIMAL: '-?\d+,\d+'
    ENTIER: '-?\d+'
    TEXTE: '«\ .*?\ »'

  datatypes_name:
    TYPE_BOOL: 'un\ booléen'
    TYPE_TEXTE: 'du\ texte'
    TYPE_NOMBRE_DECIMAL: 'un\ nombre\ décimal'
    TYPE_NOMBRE_ENTIER: 'un\ nombre\ entier'
    TYPE_NOMBRE: 'un\ nombre'
    TYPE_TABLEAU: 'un\ tableau'
    TYPE_FONCTION: 'une\ fonction'

  PLUS: 'plus'
  MOINS: 'moins'
  FOIS: 'fois'
  DIV: 'divisé\ par'
  MODULO: 'modulo'

  PLUS_PETIT: '\<'


  ET: 'et'
  OU: 'ou'
  DE: 'de'
  VIRGULE: ','
  POINT_VIRGULE: ';'

  VARIABLE: '\p{Lu}[0-9_\p{L}]*'

Ignore:
  - '^Note\ à\ moi-même\ :\ .*?[\.\!\?]$'
  - '\s+'

EndStatement: '[\.\!\?]'


# tente - attrape - et puis (try-catch)
#
